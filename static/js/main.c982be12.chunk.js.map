{"version":3,"sources":["Loading.js","Countries.js","pin.js","CountryDetails.js","App.js","serviceWorker.js","index.js"],"names":["Loading","_ref","message","react_default","a","createElement","Container","className","Countries","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","searchTerm","countries","searchValue","bind","assertThisInitialized","_this2","axios","get","then","res","data","setState","e","target","value","getAllcountries","_this$state","handleClick","fluid","Row","type","placeholder","onChange","filter","item","name","toLowerCase","includes","isSearched","map","country","index","Col","sm","key","concat","onClick","Link","to","src","flag","alt","src_Loading","Component","pinStyle","cursor","fill","stroke","Pin","_this$props$size","size","height","viewBox","style","objectSpread","transform","d","PureComponent","navStyle","position","top","left","padding","CountryDetails","details","viewport","latitude","longitude","zoom","bearing","pitch","markers","_updateViewport","catch","response","undefined","status","window","location","cName","getSingleCountry","_this3","Breadcrumb","Item","href","active","xs","capital","parseInt","population","toLocaleString","region","esm","assign","width","mapStyle","onViewportChange","latlng","mapboxApiAccessToken","pin_Pin","React","App","replace","Route","exact","path","render","src_Countries","history","src_CountryDetails","Boolean","hostname","match","ReactDOM","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c982be12.chunk.js","sourcesContent":["import React from 'react';\nimport {Container} from 'react-bootstrap';\n\nconst Loading = ({message}) => \n\n<Container>\n    <div className=\"flex\"></div>\n    <div className=\"loader\"></div>\n\n    <div className=\"load-text\">\n        {message}\n    </div>\n</Container>\n\n\n\nexport default Loading;","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\nimport axios from 'axios';\nimport Loading from './Loading';\nimport {Container,Row,Col} from 'react-bootstrap';\nimport './App.scss';\n\n\nfunction isSearched(searchTerm) {\n    return function(item) {\n      return !searchTerm || item.name.toLowerCase().includes(searchTerm.toLowerCase());\n    }\n  }  \n\nclass Countries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      searchTerm: '',\n      countries: [],\n    }\n    this.searchValue = this.searchValue.bind(this);\n  }\n\n  getAllcountries() {\n    axios.get(`https://restcountries.eu/rest/v2/all`)\n      .then(res => {\n        const countries = res.data;\n        this.setState({ \n          countries,\n          isLoaded: true \n        });\n      })\n\n      this.setState ({\n        isLoaded: false\n      })\n  }\n\n  searchValue (e) {\n    this.setState ({searchTerm: e.target.value})\n  }\n\n  componentDidMount() {\n    this.getAllcountries();\n  }\n  \n \n  render() {\n\n    const {countries, isLoaded, searchTerm} = this.state;\n    const {handleClick} = this.props\n    return (\n\n\n        \n      isLoaded ?\n        <div>\n            <Container fluid>\n                <Row>\n                    <div className=\"wrapper-search\">\n                        <form>\n                            <input type=\"search\" placeholder=\"Search\" onChange={this.searchValue}/>\n                        </form>\n                    </div>\n                </Row>\n            \n            \n            \n                <Row>\n                    {countries.filter(isSearched(searchTerm)).map((country,index) =>\n                      <Col className=\"countries\" sm={2} key={`countries-${index}`} onClick={() => handleClick(country) }> \n                        <Link to=\"/details\"><p> {country.name} </p>\n                        <img className=\"flag\" src={country.flag} alt={country.name} /></Link>\n                      </Col>            \n                    )}\n                </Row>\n            </Container>\n        \n        </div>\n      : <Loading message=\"Loading...\" />\n      \n    );\n  }\n}\n\n\nexport default Countries;\n","import React, {PureComponent} from 'react';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst pinStyle = {\n  cursor: 'pointer',\n  fill: '#d00',\n  stroke: 'none'\n};\n\nexport default class Pin extends PureComponent {\n\n  render() {\n    const {size = 20} = this.props;\n\n    return (\n      <svg \n        height={size}\n        viewBox=\"0 0 24 24\"\n        style={{...pinStyle, transform: `translate(${-size / 2}px,${-size}px)`}}\n      >\n        <path d={ICON}/>\n      </svg>\n    );\n  }\n}","import React from 'react';\nimport axios from 'axios';\nimport {Container, Col, Row, Breadcrumb} from 'react-bootstrap';\nimport MapGL, {Marker, NavigationControl} from 'react-map-gl';\nimport Pin from './pin';\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport './App.scss';\n\nconst TOKEN = 'pk.eyJ1IjoicmFmYWhlbGwiLCJhIjoiY2pzMzJ1MnZ2MjQxYjQ0bHh4amQyczJyMSJ9.-iEWBE9bMBsJvf5uUtFiAw';\nconst navStyle = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: '10px',\n  };\n\nclass CountryDetails extends React.Component {\n    // constructor(props) {\n    //     super(props);\n\n        state = {\n            details: [],\n            viewport: {\n                latitude: -10,\n                longitude: -35,\n                zoom: 2,\n                bearing: 0,\n                pitch: 0\n            },\n            markers: [],\n        };\n    // }\n  \n\n    getSingleCountry(name) {\n        axios.get(\"https://restcountries.eu/rest/v2/name/\" + name)\n        .then(res => {\n            const details = res.data;\n            this.setState({ \n                details\n            }) \n        }).catch((response) => {\n           if (response.status === undefined) {\n               window.location = '/' \n           }\n        })\n    }\n\n    _updateViewport = (viewport) => {\n        this.setState({viewport});\n    }\n\n    componentDidMount () {\n        const {cName} = this.props;\n        this.getSingleCountry(cName);\n    }\n    \n    render(){\n\n        const { details, viewport} = this.state;\n        // const { cName} = this.props\n        \n        return(\n\n            <Container>\n                \n                <Breadcrumb>\n                    <Breadcrumb.Item href=\"/\">Home</Breadcrumb.Item>\n                    {details.map((get,index) =>\n                        <Breadcrumb.Item active key={`get-${index}`}>{get.name}</Breadcrumb.Item>\n                    )}\n                </Breadcrumb>\n                <Row>\n                {details.map((d,index) =>\n                    <Col xs={9} key={`details-${index}`}>\n                        <p>Country: {d.name}</p>\n                        <p>Capital: {d.capital}</p>\n                        <p>Population: {parseInt(d.population).toLocaleString()}</p>\n                        <p>Region: {d.region}</p>\n                        \n                        <MapGL \n                          {...viewport}\n                            width=\"100%\"\n                            height=\"400px\"\n                            mapStyle=\"mapbox://styles/mapbox/streets-v10\"\n                            onViewportChange={this._updateViewport}\n                            longitude={d.latlng[1]}\n                            latitude={d.latlng[0]}\n                            mapboxApiAccessToken={TOKEN} >\n                          \n                          <Marker\n                            longitude={d.latlng[1]}\n                            latitude={d.latlng[0]}\n                            // offsetTop={-20}\n                            //  offsetLeft={-10}\n                            >\n                            <Pin size={20} />\n                          </Marker>\n                          \n                          <div className=\"nav\" style={navStyle}>\n                            <NavigationControl  onViewportChange={(viewport) => this.setState({viewport})} /> \n                          </div>\n\n                        </MapGL>\n                    </Col> \n                    )}\n\n                    {details.map((flag,index) =>\n                        <Col className=\"countries\" xs={3}  key={`flag-${index}`}>\n                            <img className=\"flag\" src={flag.flag} alt={flag.name} />\n                        </Col>\n                    )}\n                </Row>\n            </Container>\n            \n        )\n    }\n}\nexport default CountryDetails;","import React, { Component } from 'react';\nimport {Route} from 'react-router-dom'\nimport Countries from './Countries';\nimport CountryDetails from './CountryDetails';\nimport {Container, Row} from 'react-bootstrap';\nimport './App.scss';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n\n  handleClick(e) {\n    const name = e.name.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&').toLowerCase();\n    this.setState({cName: name })\n  }\n\n  componentDidMount() {\n  }\n  \n \n  render() {\n\n    return (\n      \n        <Container fluid>\n        <Row>\n          <Route exact path=\"/\" render={() => (\n              <Countries  \n                  cName={this.state.cName} \n                  handleClick={this.handleClick}\n              />\n            )}\n          />\n\n          <Route path=\"/details/\" render={({history}) => (\n            <CountryDetails\n                cName={this.state.cName}\n            />\n          )}\n        />\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter} from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( <BrowserRouter basename={process.env.PUBLIC_URL}>\n<App />\n</BrowserRouter>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}