{"version":3,"sources":["Loading.js","Countries.js","pin.js","CountryDetails.js","App.js","serviceWorker.js","index.js"],"names":["Loading","_ref","message","react_default","a","createElement","Container","className","Countries","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","countries","_this2","axios","get","then","res","data","setState","getAllcountries","_this$state","handleClick","Row","map","country","index","Col","sm","key","concat","onClick","Link","to","name","src","flag","alt","src_Loading","React","Component","pinStyle","cursor","fill","stroke","Pin","_this$props$size","size","height","viewBox","style","objectSpread","transform","d","PureComponent","navStyle","position","top","left","padding","CountryDetails","details","viewport","latitude","longitude","zoom","bearing","pitch","markers","_updateViewport","catch","response","undefined","status","window","location","cName","getSingleCountry","_this3","capital","parseInt","population","toLocaleString","region","esm","assign","width","mapStyle","onViewportChange","latlng","mapboxApiAccessToken","pin_Pin","App","bind","assertThisInitialized","e","replace","toLowerCase","Route","exact","path","render","src_Countries","history","src_CountryDetails","Boolean","hostname","match","ReactDOM","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35dad8e1.chunk.js","sourcesContent":["import React from 'react';\nimport {Container} from 'react-bootstrap';\n\nconst Loading = ({message}) => \n\n<Container>\n    <div className=\"flex\"></div>\n    <div className=\"loader\"></div>\n\n    <div className=\"load-text\">\n        {message}\n    </div>\n</Container>\n\n\n\nexport default Loading;","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom'\nimport axios from 'axios';\nimport Loading from './Loading';\nimport {Container,Row,Col} from 'react-bootstrap';\nimport './App.scss';\n\n\nclass Countries extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      countries: [],\n    }\n  }\n\n  getAllcountries() {\n    axios.get(`https://restcountries.eu/rest/v2/all`)\n      .then(res => {\n        const countries = res.data;\n        this.setState({ \n          countries,\n          isLoaded: true \n        });\n      })\n\n      this.setState ({\n        isLoaded: false\n      })\n  }\n\n  componentDidMount() {\n    this.getAllcountries();\n  }\n  \n \n  render() {\n\n    const {countries, isLoaded} = this.state;\n    const {handleClick} = this.props\n    return (\n      isLoaded ?\n        \n              <Container>\n                <Row>\n                    {countries.map((country,index) =>\n                      <Col className=\"countries\" sm={3} key={`countries-${index}`} onClick={() => handleClick(country) }> \n                        <Link to=\"/details\"><p> {country.name} </p>\n                        <img className=\"flag\" src={country.flag} alt={country.name} /></Link>\n                      </Col>            \n                    )}\n                </Row>\n              </Container>\n          \n      : <Loading message=\"Loading...\" />\n      \n    );\n  }\n}\n\n\nexport default Countries;\n","import React, {PureComponent} from 'react';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst pinStyle = {\n  cursor: 'pointer',\n  fill: '#d00',\n  stroke: 'none'\n};\n\nexport default class Pin extends PureComponent {\n\n  render() {\n    const {size = 20} = this.props;\n\n    return (\n      <svg \n        height={size}\n        viewBox=\"0 0 24 24\"\n        style={{...pinStyle, transform: `translate(${-size / 2}px,${-size}px)`}}\n      >\n        <path d={ICON}/>\n      </svg>\n    );\n  }\n}","import React from 'react';\nimport axios from 'axios';\nimport {Container, Col} from 'react-bootstrap';\nimport MapGL, {Marker, NavigationControl} from 'react-map-gl';\nimport Pin from './pin';\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nconst TOKEN = 'pk.eyJ1IjoicmFmYWhlbGwiLCJhIjoiY2pzMzJ1MnZ2MjQxYjQ0bHh4amQyczJyMSJ9.-iEWBE9bMBsJvf5uUtFiAw';\nconst navStyle = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: '10px',\n  };\n\nclass CountryDetails extends React.Component {\n    // constructor(props) {\n    //     super(props);\n\n        state = {\n            details: [],\n            viewport: {\n                latitude: -10,\n                longitude: -35,\n                zoom: 2,\n                bearing: 0,\n                pitch: 0\n            },\n            markers: [],\n        };\n    // }\n  \n\n    getSingleCountry(name) {\n        axios.get(\"https://restcountries.eu/rest/v2/name/\" + name)\n        .then(res => {\n            const details = res.data;\n            this.setState({ \n                details\n            }) \n        }).catch((response) => {\n           if (response.status === undefined) {\n               window.location = '/' \n           }\n        })\n    }\n\n    _updateViewport = (viewport) => {\n        this.setState({viewport});\n    }\n\n    componentDidMount () {\n        const {cName} = this.props;\n        this.getSingleCountry(cName);\n    }\n    \n    render(){\n\n        const { details, viewport} = this.state;\n        // const { cName} = this.props\n        \n        return(\n            <Container>\n                {details.map((d,index) =>\n                    <Col key={`details-${index}`}>\n                        <p>Name: {d.name}</p>\n                        <p>Capital: {d.capital}</p>\n                        <p>Population: {parseInt(d.population).toLocaleString()}</p>\n                        <p>Region: {d.region}</p>\n                        \n                        <MapGL \n                          {...viewport}\n                            width=\"100%\"\n                            height=\"400px\"\n                            mapStyle=\"mapbox://styles/mapbox/streets-v10\"\n                            onViewportChange={this._updateViewport}\n                            longitude={d.latlng[1]}\n                            latitude={d.latlng[0]}\n                            mapboxApiAccessToken={TOKEN} >\n                          \n                          <Marker\n                            longitude={d.latlng[1]}\n                            latitude={d.latlng[0]}\n                            // offsetTop={-20}\n                            //  offsetLeft={-10}\n                            >\n                            <Pin size={20} />\n                          </Marker>\n                          \n                          <div className=\"nav\" style={navStyle}>\n                            <NavigationControl  onViewportChange={(viewport) => this.setState({viewport})} /> \n                          </div>\n\n                        </MapGL>\n                    </Col> \n                )}\n            </Container>\n            \n        )\n    }\n}\nexport default CountryDetails;","import React, { Component } from 'react';\nimport {Route} from 'react-router-dom'\nimport Countries from './Countries';\nimport CountryDetails from './CountryDetails';\nimport {Container} from 'react-bootstrap';\nimport './App.scss';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n\n  handleClick(e) {\n    const name = e.name.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&').toLowerCase();\n    this.setState({cName: name })\n  }\n\n  componentDidMount() {\n  }\n  \n \n  render() {\n\n    return (\n      \n        <Container>\n          <Route exact path=\"/\" render={() => (\n              <Countries  \n                  cName={this.state.cName} \n                  handleClick={this.handleClick}\n              />\n            )}\n          />\n\n          <Route path=\"/details/\" render={({history}) => (\n            <CountryDetails\n                cName={this.state.cName}\n            />\n          )}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter} from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( <BrowserRouter basename={process.env.PUBLIC_URL}>\n<App />\n</BrowserRouter>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}