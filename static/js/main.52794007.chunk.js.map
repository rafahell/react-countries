{"version":3,"sources":["pin.js","CountryDetails.js","App.js","serviceWorker.js","index.js"],"names":["pinStyle","cursor","fill","stroke","Pin","_this$props$size","this","props","size","react_default","a","createElement","height","viewBox","style","Object","objectSpread","transform","concat","d","PureComponent","navStyle","position","top","left","padding","CountryDetails","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_onViewportChange","viewport","setState","state","details","zoom","bearing","pitch","name","_this2","axios","get","then","res","data","catch","response","undefined","status","window","location","cName","getSingleCountry","_this3","_this$state","Container","map","index","Col","key","capital","parseInt","population","toLocaleString","region","esm","assign","width","mapStyle","onViewportChange","longitude","Number","latlng","latitude","mapboxApiAccessToken","pin_Pin","className","React","Component","App","isLoaded","countries","countryName","handleClick","bind","assertThisInitialized","e","replace","toLowerCase","getAllcountries","Route","exact","path","render","Row","country","sm","onClick","Link","to","src","flag","alt","_ref","history","src_CountryDetails","Boolean","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52794007.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst pinStyle = {\n  cursor: 'pointer',\n  fill: '#d00',\n  stroke: 'none'\n};\n\nexport default class Pin extends PureComponent {\n\n  render() {\n    const {size = 20} = this.props;\n\n    return (\n      <svg \n        height={size}\n        viewBox=\"0 0 24 24\"\n        style={{...pinStyle, transform: `translate(${-size / 2}px,${-size}px)`}}\n      >\n        <path d={ICON}/>\n      </svg>\n    );\n  }\n}","import React from 'react';\nimport axios from 'axios';\nimport {Container, Col} from 'react-bootstrap';\nimport MapGL, {Marker, NavigationControl} from 'react-map-gl';\nimport Pin from './pin';\n\nconst TOKEN = 'pk.eyJ1IjoicmFmYWhlbGwiLCJhIjoiY2pzMzJ1MnZ2MjQxYjQ0bHh4amQyczJyMSJ9.-iEWBE9bMBsJvf5uUtFiAw';\nconst navStyle = {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: '10px',\n  };\n\nclass CountryDetails extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            details: [],\n            viewport: {\n                //latitude: 37.785164,\n                //longitude: -100,\n                zoom: 2,\n                bearing: 0,\n                pitch: 0\n            }\n        };\n    }\n  \n\n    getSingleCountry(name) {\n        axios.get(\"https://restcountries.eu/rest/v2/name/\" + name)\n        .then(res => {\n            const details = res.data;\n            this.setState({ \n                details\n            }) \n        }).catch((response) => {\n            if (response.status === undefined) {\n                window.location = '/' \n            }\n        })\n    }\n\n    _onViewportChange = viewport => this.setState({\n        viewport: {...this.state.viewport, ...viewport}\n    });\n    \n\n    componentDidMount () {\n        const {cName} = this.props;\n        this.getSingleCountry(cName);\n    }\n\n    render(){\n\n        const { details, viewport } = this.state;\n        \n        return(\n            <Container>\n                {details.map((d,index) =>\n                    <Col key={`details-${index}`}>\n                        <p>Name: {d.name}</p>\n                        <p>Capital: {d.capital}</p>\n                        <p>Population: {parseInt(d.population).toLocaleString()}</p>\n                        <p>Region: {d.region}</p>\n                        <MapGL \n                          {...viewport}\n                          width=\"100%\"\n                          height=\"400px\"\n                          mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n                          onViewportChange={this._onViewportChange}\n                          longitude={Number(d.latlng[0])}\n                            latitude={Number(d.latlng[1])}\n                          mapboxApiAccessToken={TOKEN} >\n                          \n                          <Marker key={`marker-${index}`}\n                            longitude={Number(d.latlng[0])}\n                            latitude={Number(d.latlng[1])}\n                            // offsetTop={-20}\n                            //  offsetLeft={-10}\n                            >\n                            <Pin size={20} />\n                          </Marker>\n                          \n                          <div className=\"nav\" style={navStyle}>\n                            <NavigationControl  onViewportChange={(viewport) => this.setState({viewport})} /> \n                          </div>\n\n                        </MapGL>\n                    </Col> \n                )}\n            </Container>\n            \n        )\n    }\n}\nexport default CountryDetails;","import React, { Component } from 'react';\nimport {Route, Link} from 'react-router-dom'\nimport axios from 'axios';\n//import Loading from './Loading';\nimport CountryDetails from './CountryDetails';\nimport {Container,Row,Col} from 'react-bootstrap';\nimport './App.scss';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      countries: [],\n      countryName: \" \"\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  getAllcountries() {\n    axios.get(`https://restcountries.eu/rest/v2/all`)\n      .then(res => {\n        const countries = res.data;\n        this.setState({ \n          countries,\n          isLoaded: true \n        });\n      })\n\n      this.setState ({\n        isLoaded: false\n      })\n  }\n\n  handleClick(e) {\n    const name = e.name.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&').toLowerCase();\n    this.setState({cName: name })\n  }\n\n  componentDidMount() {\n    this.getAllcountries();\n  }\n  \n \n  render() {\n\n    // const {isLoaded, countries} = this.state;\n    const {countries} = this.state;\n\n    return (\n      //isLoaded ?\n      \n        <Container>\n          <Route exact path=\"/\" render={() => (\n              <Container>\n                <Row>\n                    {countries.map((country,index) =>\n                      <Col className=\"countries\" sm={3} key={`countries-${index}`} onClick={() => this.handleClick(country) }> \n                        <Link to=\"/details\"><p> {country.name} </p>\n                        <img className=\"flag\" src={country.flag} alt={country.name} /></Link>\n                      </Col>            \n                    )}\n                </Row>\n              </Container>\n            )}\n          />\n\n          <Route path=\"/details\" render={({history}) => (\n            <CountryDetails\n              cName={this.state.cName}\n            />\n          )}\n        />\n\n      {/* : <Loading message=\"Loading...\" /> */}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render( <BrowserRouter>\n<App />\n</BrowserRouter>, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}